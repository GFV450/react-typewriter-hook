{"version":3,"sources":["logo.svg","../../build/index.js","../../build/useTypewriter.js","../../build/typeWriter.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","Object","defineProperty","value","useTypewriter_1","default","react_1","writter","str","_a","useState","word","setWord","intervalRef","useRef","strRef","useEffect","current","startTypeWord","setInterval","typing","rd","clearInterval","TypeWritter","this","dummyQueue","eventQueue","prototype","restartTypeWriter","memoWord","nextWord","split","erasing","erase","el","shift","push","join","pop","r","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useState","_useState2","slicedToArray","setValue","_useState3","_useState4","time","setTime","useTypewriter","className","src","logo","alt","rows","cols","onChange","ev","target","placeholder","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4a7a46b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar useTypewriter_1 = require(\"./useTypewriter\");\n\nexports.default = useTypewriter_1.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar typeWriter_1 = require(\"./typeWriter\");\n\nvar writter = new typeWriter_1.default();\n\nfunction useTypeWritter(str) {\n  var _a = react_1.useState(null),\n      word = _a[0],\n      setWord = _a[1];\n\n  var intervalRef = react_1.useRef({});\n  var strRef = react_1.useRef({});\n  react_1.useEffect(function () {\n    strRef.current = setWord(writter.startTypeWord(str));\n  }, [str]);\n  react_1.useEffect(function () {\n    intervalRef.current = setInterval(function () {\n      setWord(writter.typing());\n    }, writter.rd());\n    return function clear() {\n      clearInterval(intervalRef.current);\n    };\n  }, [word]);\n  return word;\n}\n\nexports.default = useTypeWritter;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TypeWritter =\n/** @class */\nfunction () {\n  function TypeWritter() {\n    this.dummyQueue = [];\n    this.eventQueue = []; // this.initTaskQueue()\n  }\n\n  TypeWritter.prototype.restartTypeWriter = function () {\n    this.memoWord = this.nextWord;\n    this.eventQueue = this.nextWord.split('');\n    this.erasing = false;\n    return '';\n  };\n  /**\n   * Main process function\n   * typing\n   *    |-- writing\n   *    |-- erasing\n   *    |-- restartWrite\n   *\n   * @returns\n   * @memberof TypeWritter\n   */\n\n\n  TypeWritter.prototype.typing = function () {\n    // earsing to last character, start write next word\n    if (this.erasing && !this.word) {\n      return this.restartTypeWriter();\n    } // earsing\n\n\n    if (this.erasing && this.word) {\n      return this.erase();\n    } // write end\n\n\n    if (this.word === this.memoWord) {\n      return this.word;\n    } // writing\n\n\n    var el = this.eventQueue.shift();\n    this.dummyQueue.push(el);\n    this.word = this.dummyQueue.join('');\n    return this.word;\n  };\n\n  TypeWritter.prototype.startTypeWord = function (str) {\n    this.erasing = true;\n    this.nextWord = str;\n    this.dummyQueue.pop();\n    this.word = this.dummyQueue.join('');\n    return this.word;\n  };\n\n  TypeWritter.prototype.erase = function () {\n    this.dummyQueue.pop();\n    this.word = this.dummyQueue.join('');\n    return this.word;\n  };\n\n  TypeWritter.prototype.rd = function () {\n    var r = Math.random();\n    return r > 0.1 || r < 0.07 ? this.rd() : r * 1000;\n  };\n\n  return TypeWritter;\n}();\n\nexports.default = TypeWritter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { useState } from \"react\"\nimport logo from './logo.svg'\nimport './App.css'\nimport useTypewriter from \"../../build\"\n\nexport default function App() {\n  const [value, setValue] = useState('')\n  const [time, setTime] = useState('')\n  const typing = useTypewriter(time)\n\n  return (\n    <div className=\"App\">\n      <header>react-typewriter-hook</header>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>{typing}</p>\n      <textarea\n        rows=\"4\"\n        cols=\"50\"\n        onChange={(ev) => setValue(ev.target.value)}\n        value={value}\n        placeholder=\"write something interesting and click start\"\n        />\n      <button onClick={() => setTime(value)}>Start!</button>\n    </div>\n  )\n}\n\n"],"sourceRoot":""}